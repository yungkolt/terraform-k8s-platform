apiVersion: sloth.slok.dev/v1
kind: PrometheusServiceLevel
metadata:
  name: frontend-slo
  namespace: monitoring
spec:
  service: "frontend"
  labels:
    team: "platform"
  slos:
    - name: "availability"
      objective: 99.9
      sli:
        events:
          error_query: |
            sum(rate(nginx_ingress_controller_requests{service="frontend",status=~"5.."}[5m]))
          total_query: |
            sum(rate(nginx_ingress_controller_requests{service="frontend"}[5m]))
      alerting:
        name: FrontendAvailabilityAlert
        page_alert:
          disable: false
        ticket_alert:
          disable: false
    - name: "latency"
      objective: 99
      sli:
        events:
          error_query: |
            sum(rate(nginx_ingress_controller_request_duration_seconds_bucket{service="frontend",le="1"}[5m]))
          total_query: |
            sum(rate(nginx_ingress_controller_request_duration_seconds_count{service="frontend"}[5m]))
      alerting:
        name: FrontendLatencyAlert
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: sre-golden-signals
  namespace: monitoring
spec:
  groups:
  - name: golden-signals
    interval: 30s
    rules:
    # Latency
    - record: service:request_duration_seconds:p50
      expr: histogram_quantile(0.50, sum(rate(nginx_ingress_controller_request_duration_seconds_bucket[5m])) by (service, le))
    - record: service:request_duration_seconds:p95
      expr: histogram_quantile(0.95, sum(rate(nginx_ingress_controller_request_duration_seconds_bucket[5m])) by (service, le))
    - record: service:request_duration_seconds:p99
      expr: histogram_quantile(0.99, sum(rate(nginx_ingress_controller_request_duration_seconds_bucket[5m])) by (service, le))
    
    # Traffic
    - record: service:request_rate
      expr: sum(rate(nginx_ingress_controller_requests[5m])) by (service)
    
    # Errors
    - record: service:error_rate
      expr: sum(rate(nginx_ingress_controller_requests{status=~"5.."}[5m])) by (service)
    - record: service:error_ratio
      expr: |
        sum(rate(nginx_ingress_controller_requests{status=~"5.."}[5m])) by (service)
        /
        sum(rate(nginx_ingress_controller_requests[5m])) by (service)
    
    # Saturation
    - record: namespace:container_cpu_usage:sum
      expr: sum(rate(container_cpu_usage_seconds_total[5m])) by (namespace)
    - record: namespace:container_memory_usage:sum
      expr: sum(container_memory_working_set_bytes) by (namespace)

  - name: slo-alerts
    rules:
    - alert: SLOBudgetBurn
      expr: |
        (
          service:error_ratio > 0.001  # 99.9% SLO
        ) and (
          service:request_rate > 1  # Only alert if there's actual traffic
        )
      for: 5m
      labels:
        severity: critical
        team: platform
      annotations:
        summary: "SLO budget burn for {{ $labels.service }}"
        description: "Error ratio is {{ $value | humanizePercentage }} (SLO: 99.9%)"
